{"version":3,"sources":["middleware/getRandomArticle.js","middleware/index.js","middleware/getQuestion.js","components/variant.js","components/question.js","App.js","serviceWorker.js","index.js"],"names":["getRandomArticle","id","this","Error","articles","article","idx","keys","Object","randomIdx","length","Math","random","shortName","Codex","Codexes","OldCodexes","key","bind","getQuestion","result","vars","getArticle","len","filter","c","getRandomCodex","getVariant","isRight","articleNum","articleText","color","setColor","rightVariant","rightIdx","i","Variant","variant","invert","showed","handleClick","answerIdx","num","text","show","className","style","onClick","Question","next","variants","rightArticle","rightText","useState","selected","setSelected","readyToAnswer","setReadyToAnswer","answered","setAnswered","0","1","2","3","colors","setColors","setShowed","win","setWin","nextQuestion","cleanAll","handleCheck","e","handleWin","handleLose","marker","newMask","selectedIdx","onVariantClick","map","checked","App","questionSet","setQuestion","setInvert","count","setCount","wins","setWins","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.82aebe53.chunk.js","sourcesContent":["/* \r\nreturn random article from codex-object\r\nneed to bind to a codex interface\r\n  interface codex: {\r\n    id: Number,\r\n    header: String,\r\n    shortName: String,\r\n    articles: Object\r\n  }\r\n\r\n  params:\r\n  id: Number - if defined, return an article with this id\r\n\r\n  returned interface RandomArticle: {\r\n    article: String,\r\n    idx: String\r\n  }\r\n*/\r\n\r\n// construction with arrow function cannot be binding!!\r\nexport function getRandomArticle (id) {\r\n    if(!this) {\r\n        throw new Error(`function needs spetial this argument`)\r\n    }\r\n\r\n    if(id){\r\n        if(!this.articles[id]){\r\n            throw new Error(\"This id is not defined\")\r\n        }\r\n        return {\r\n            article: this.articles[id],\r\n            idx: id\r\n        }\r\n    }\r\n    \r\n    let keys = Object.keys(this.articles)\r\n    let len = keys.length\r\n    let randomIdx = keys[(len * Math.random()) | 0]\r\n\r\n    return {\r\n        article: this.articles[randomIdx], \r\n        idx: randomIdx + \" \" + this.shortName,\r\n        Codex: this.id\r\n    }\r\n}","import * as OldCodexes from \"../codexes\"\r\nimport { getRandomArticle } from \"./getRandomArticle\"\r\nimport { getQuestion } from \"./getQuestion\"\r\n\r\nlet Codexes = {...OldCodexes}\r\n\r\nfor(let key in Codexes){\r\n  Codexes[key].getRandomArticle = getRandomArticle.bind(Codexes[key])\r\n}\r\n\r\nCodexes.getQuestion = getQuestion.bind(Codexes)\r\n\r\nexport { Codexes }\r\n","/* \r\nreturn valid question from codexes-object\r\nneed to bind to a codex interface\r\n  interface codexes: {\r\n    codex1: Codex,\r\n    codex2: Codex...\r\n  }\r\n\r\n  params:\r\n  Codex: String - if defined, return a question only from this codex\r\n\r\n  returned interface Question: {\r\n    vars: Array of Variant,\r\n    rightVariant: Number,\r\n    rightIdx: Number\r\n  }\r\n\r\n  interface Variant: {\r\n      articleNum: Number,\r\n      articleText: String,\r\n      isRight: Bool,\r\n      color: String,\r\n      setColor: function\r\n  }\r\n*/\r\n\r\nexport function getQuestion(Codex) {\r\n    let result = {\r\n      vars: []\r\n    }\r\n\r\n    const getRandomCodex = () => {\r\n        let keys = Object.keys(this)\r\n        keys = keys.filter(c => typeof this[c] !== \"function\")\r\n        let len = keys.length\r\n        let randomIdx = (Math.random() * len) | 0\r\n\r\n        return keys[randomIdx]\r\n    }\r\n\r\n    const getArticle = (idx) => Codex \r\n        ? this[Codex].getRandomArticle(idx)\r\n        : this[getRandomCodex()].getRandomArticle(idx)\r\n\r\n    const getVariant = ({idx: articleNum, article: articleText}, isRight) => ({\r\n        articleNum,\r\n        articleText,\r\n        isRight,\r\n        color: 'transparent',\r\n        setColor: (color) => {this.color = color} \r\n    })\r\n\r\n    let rightVariant = (Math.random() * 4) | 0\r\n    result.vars[rightVariant] = getVariant(getArticle(), true)\r\n    result.rightVariant =  result.vars[rightVariant]\r\n    result.rightIdx = rightVariant\r\n\r\n    for(let i = 0; i < 4; i++){\r\n      if(i == rightVariant) continue\r\n      result.vars[i] = getVariant(getArticle())\r\n    }\r\n\r\n    // result.rightVariant = rightVariant\r\n\r\n    return result\r\n  }","import React from 'react'\r\n\r\nexport const Variant = ({variant, invert, color, idx, showed, handleClick}) => {\r\n    let answerIdx = \"answer\" + idx\r\n    let num = variant.articleNum\r\n    let text = variant.articleText\r\n    let show = showed && !variant.isRight\r\n\r\n    return (<>\r\n        <div className=\"millionare__variant\" \r\n            id={answerIdx}\r\n            style={{\"backgroundColor\": color}}\r\n            onClick={handleClick}>\r\n\r\n            {invert \r\n                ? text + (show ? (\" ( \" + num + \" )\") : \"\") \r\n                : num + (show ? (\" ( \" + text + \" )\") : \"\")}\r\n        </div>\r\n    </>)\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Variant } from './variant';\r\n\r\nimport \"./question.css\"\r\n\r\nexport function Question({invert, vars, rightVariant, rightIdx, next, articleNum, articleText}) {\r\n    let variants = vars\r\n    let rightArticle = \"Статья \" + rightVariant.articleNum\r\n    let rightText = rightVariant.articleText\r\n    let defaultColors = {\r\n        0: \"transparent\",\r\n        1: \"transparent\",\r\n        2: \"transparent\",\r\n        3: \"transparent\"\r\n    }\r\n\r\n    let [selected, setSelected] = useState(-1)\r\n    let [readyToAnswer, setReadyToAnswer] = useState(false)\r\n    let [answered, setAnswered] = useState(false)\r\n    let [colors, setColors] = useState(defaultColors)\r\n    let [showed, setShowed] = useState(false)\r\n    let [win, setWin] = useState(false)\r\n    \r\n    const nextQuestion = () => {\r\n        cleanAll()\r\n        setAnswered(false)\r\n        setReadyToAnswer(false)\r\n        setShowed(false)\r\n        next(win)\r\n    }\r\n\r\n    const handleCheck = (e) => {\r\n        if(selected == -1) return\r\n        \r\n        if(answered) {\r\n            setAnswered(false)\r\n            nextQuestion()\r\n        } \r\n\r\n        if(selected == rightIdx){\r\n            handleWin()\r\n        } else {\r\n            handleLose(selected)\r\n        }\r\n        setShowed(true)\r\n        setReadyToAnswer(false)\r\n        setAnswered(true)\r\n    }\r\n\r\n    const marker = (idx, color=\"transparent\") => {\r\n        let newMask = colors\r\n        newMask[idx] = color\r\n        setColors(newMask)\r\n    }\r\n\r\n    function cleanAll() {\r\n        for(let i = 0; i < 4; i++){\r\n            marker(i)\r\n        }\r\n    }\r\n\r\n    const handleLose = (selectedIdx) => {\r\n        marker(selectedIdx, \"red\")\r\n        marker(rightIdx, \"green\")\r\n    }\r\n    \r\n    const handleWin = () => {\r\n        marker(rightIdx, \"green\")\r\n        setWin(true)\r\n    }\r\n\r\n    const onVariantClick = (idx) => () => {\r\n        if(readyToAnswer && (selected == idx)){\r\n            handleCheck()\r\n            return\r\n        }\r\n        if(answered){\r\n            return\r\n        }\r\n        cleanAll()\r\n        setSelected(idx)\r\n        setReadyToAnswer(true)\r\n        marker(idx, \"yellow\")\r\n    }\r\n\r\n    return (<>\r\n        <h3>\r\n            {invert ? rightArticle : rightText}\r\n        </h3>\r\n        {\r\n            variants.map((variant, idx) => {\r\n                return (<Variant \r\n                    key={idx}\r\n                    idx={idx}\r\n                    color={colors[idx]}\r\n                    checked={selected==idx}\r\n                    handleClick={onVariantClick(idx)}\r\n                    invert={invert}\r\n                    showed={showed}\r\n                    variant={variant}/>)\r\n            })\r\n        }\r\n        {\r\n            readyToAnswer\r\n                ? <button onClick={handleCheck}>Готов ответить</button>\r\n                : <button onClick={nextQuestion}>Следующий вопрос</button>\r\n        }\r\n    </>)\r\n}","import React, {useState} from 'react';\n\nimport { Codexes } from './middleware' \nimport { Question } from \"./components/question\"\n\nimport './App.css';\n\nfunction App() {\n  let [questionSet, setQuestion] = useState(Codexes.getQuestion())\n  let [invert, setInvert] = useState(true)\n  let [count, setCount] = useState(0)\n  let [wins, setWins] = useState(0)\n\n  function next(isWin = true){\n    if(isWin) setWins(wins + 1)    \n    setCount(count + 1)\n    setQuestion(Codexes.getQuestion())\n    setInvert(Math.random() > 0.5)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Попробуй ответить на вопросы!!</h2>  \n      </header>\n      <section>\n        <h3>Текущий счет: {wins} - {count - wins}</h3>\n      </section>\n      <Question next={next} invert={invert} {...questionSet}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}